<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>修改hosts登录github page的方法</title>
      <link href="/2020/08/01/tech-notes-hosts/"/>
      <url>/2020/08/01/tech-notes-hosts/</url>
      
        <content type="html"><![CDATA[<p><em>以下整理自知乎该问题下的几个回答，经测试可用：<a href="https://www.zhihu.com/question/20732532" target="_blank" rel="noopener">https://www.zhihu.com/question/20732532</a></em></p><p>1.在网站（ <a href="http://tool.chinaz.com/dns" target="_blank" rel="noopener">http://tool.chinaz.com/dns</a> ）输入需要打开的网址，获取ip地址</p><p>2.打开cmd，挨个去ping这些ip地址，如果全都无法ping通，重复步骤1再获取一批ip地址，直到找到可以ping通的</p><p>3.打开hosts文件（C:\windows\System32\drivers\etc），把这个ip添加进去</p><p>4.如果发现提示没有hosts文件的修改权限，右键hosts属性-安全-高级，修改users的用户权限为可以写入和修改</p><p>5.在cmd中，<code>ipconfig/flushdns</code>，即可打开网址</p><p><em>以上仅可适用于可以用修改hosts方法打开的网站</em></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
          <category> Study Notes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A股市场资产定价浅谈</title>
      <link href="/2020/06/02/eco-method-a-share-market-asset-pricing/"/>
      <url>/2020/06/02/eco-method-a-share-market-asset-pricing/</url>
      
        <content type="html"><![CDATA[<p>谈到股票市场的资产定价，大部分学院派包括很多年前的我的脑子里第一涌现出的应该是DCF、DDM等等一揽子教科书上的模型。而后我们会遇到第一个问题，在使用这些模型的时候里面的数据要怎么取？接着，我们会发现在取数据的过程中，进行了太多的主观假定，这让看起来科学严谨的定价模型，实际用起来不过是一本正经地拍脑门。这时候我们开始摒弃这些绝对估值模型，改用相对估值方法，去横向对比同行业里竞品公司的估值，去纵向对比个股自身的历史估值。而后我们又会面对一些问题，那些过去的历史估值和竞品的当前估值是怎么形成的？什么情况下应该怎么参考这些可比估值？如果不能弄清这些依据和锚点，相对估值方法也不过是另一种形式的拍脑门。</p><p>一种在A股市场基本面分析中非常常见的估值定价方法，是先做出业绩预测，得到当年预计的EPS值，大部分时候就直接用卖方预测加权平均做一致预期，然后视行业大小，找到5-10家和标的关联度最大的竞品公司，用它们当前的PE的平均值作为参考PE值，然后相乘得出需定价标的价格。这种做法的优势在于最大限度地排除了研究员个人拍脑门，所有需要拍的部分都来自于市场平均的一致预期，而既然预期决定价格，那么当确实市场的所有参与者都认同这个一致预期的时候，标的价格就确实会向这个理论价格回归。但是，说到这里可能就发现问题了，做预测的人是卖方分析师，而卖方分析师并不是市场参与者，他们会影响到一部分市场参与者，即公募机构等大型合格投资者的观点，但A股市场的特殊性在于它还存在大量的非合格投资者，一部分是俗称散户的缺乏金融基础知识的投资者，一部分是俗称游资的专门以掠夺这些无金融基础投资者为主要盈利来源的中型投资者，这些非合格投资者们的行为并不会参照合格投资者的一致预期，而合格投资者在市场中并非压倒性多数，也因此无法独立决定资产价格，尤其越是股票市场回报率较高的牛市时，越会有大量缺乏金融基础知识的非合格投资者涌入，并推动资产价格向远离合理定价的上方偏离，而此时，由于这样的价格偏离存在相当一段时间的持续性，合格投资者们为提高自身产品收益，往往也会参与这些已经显著高于合理定价的标的，来分享这由增量资金入场而带来的资产价格普涨，这又会反过来进一步推动价格向上偏离。直到增量资金增长停止，游资短期获利了结带动资产价格下行，这又导致定价敏感的合格投资者减仓止盈，最后是意识到收益率并不理想的个人非专业投资者止损离场，这些之前推动资产价格普涨的增量资金在离场的时候又会同样导致一段时间内的资产价格普跌。而这个普涨与普跌的过程，其实完全是由于资金和情绪所引起的，和基于上市公司基本面的估值的定价并无太大关系，但无可否认，这也需要进行资产定价，一方面对于以盈利为目的的投资活动来说是有意义的，另一方面它确实也是一个合理的资产价值，不是基于公司基本面的合理的资产价值，但是是基于股票市场资金量的合理的资产价值，就像币值一方面取决于实体，另一方面也取决于货币供应量一样。</p><p>那么，应该如何判断和预测A股标的的合理价格呢？我认为第一步是先明确A股市场的大点位，因为A股存在一个非常大的特点，即相关性非常高，个股标的很难在指数前面独善其身。而点位怎么判断？看宏观周期，看政策导向，看外围景气，看市场情绪。最后一条尤为有效，尤其是在没有增量资金入场也没有特别超预期的黑天鹅事件发生的时候，市场其实往往是在某个点位区间内震荡，到某个点位附近的时候能够明显感觉到上行乏力，获利盘了结意愿强烈；而到某个点位附近的时候又能明显感觉到跌不动了，一些长期资金开始建仓或者做波段买入。通过观察市场，可以找到一段时间内没有实质性新信息的情况下市场的点位区间。而后，就可以横向纵向参考在同样点位区间时的可比估值，来确定一个粗略的定价区间了。在这个定价区间中，尤为重要的是它的上限，我们可以称之为压力位，在市场环境和标的基本面都没有发生实质性变化的情况下，这个压力位对于中长期投资会是一个波段操作的减仓位，而对于短期事件性投资来说会是一个获利了结的平仓位。<br>而后第二步，看安全边际，很多卖方会把行业和个股的历史平均PE拿来作为安全边际，但其实这仅仅在部分情况下适用，一般是白马股，之所以这会成为安全边际，是因为只要低于这个价格，大型公募基金就会建仓或者加仓做波段，换言之，安全边际的意义在于低于某个特定的价格，会有资金买入，从而使得其价格出现回升。对这些标的，安全边际是平均PE，而对另一些标的，安全边际可能是壳价值，可能是股权质押位，可能是定增位等等等等，在市场环境没有发生根本性变动的情况下，股价很难实质性跌穿这个安全垫，因此提供了一个标的的市值安全位，这个安全位可以用来修正前面的定价区间下限。安全位的定价，最主要的是用来作为建仓的参考。一般来说，在基本面没有发生改变的情况下，如果股价进入到第二步所计算出的安全位下方，会是一个不错的建仓时机，但大部分时候股价很难进入这个区间，因此可以在安全位上方，合理位附近逐步建仓，然后在股价在合理位至压力位区间内做波段，来摊低成本，直至实际成本进入安全位下，建仓完成。此后可以继续波段操作增厚收益。<br>第三步是看关键预期，股票标的的价格来源于投资者的一致预期的合力，而在这个合力中，并不是每一股力量都有明确坚定的方向，事实上，大部分力量是顺势而为的，合力往哪个方向，它们就随之变向，因此相对于它们而言，另一些有明确坚定方向的力量对于合力方向的形成更关键，比如定增，比如减持等等等等，也所以会有新财富拜票行情，会有年末基金排名行情等等等等，而在数年一遇的牛市行情中，大量非合格投资者的涌入和他们的非理性追涨也是一种决定合力方向的关键预期，这种预期甚至会影响到那些论单个体量远大于它们的大资金的行为。当然，并不是每一个关键预期都一定会兑现，关键预期的实现往往是与第一步中所谈到的市场环境相适应的，在市场整体环境不配合的情况下，拥有特定关键预期的个股还是很难走出独立行情，但在环境适宜的情况下，有关键预期的个股往往比没有关键预期的标的更容易更快形成一致预期，并往往更高弹性。</p>]]></content>
      
      
      <categories>
          
          <category> Eco </category>
          
          <category> Method </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Outside Ivory Tower </tag>
            
            <tag> world observe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贵金属分析框架</title>
      <link href="/2020/06/02/eco-method-gold-and-silver/"/>
      <url>/2020/06/02/eco-method-gold-and-silver/</url>
      
        <content type="html"><![CDATA[<h4 id="基本概念："><a href="#基本概念：" class="headerlink" title="基本概念："></a>基本概念：</h4><h5 id="黄金："><a href="#黄金：" class="headerlink" title="黄金："></a>黄金：</h5><p>期货：【外盘】纽约金comex主力，【内盘】上期所沪金主力<br>现货：【外盘】伦敦金，【内盘】上金所Au(T+D)<br>基金持仓：【最大黄金ETF基金】SPDR，【投机持仓】CFTC持仓(美国商品期货交易委员会公布的纽约期金非商业持仓(投机)净多头<br>单位换算：外盘为美元/盎司，内盘为元/克；1盎司=31克，1美元=7.2元。</p><h5 id="白银："><a href="#白银：" class="headerlink" title="白银："></a>白银：</h5><p>期货：【外盘】纽约银comex主力，【内盘】上期所沪银主力<br>现货：【外盘】伦敦银，【内盘】上金所Ag(T+D)<br>基金持仓：【最大白银ETF基金】iShare SLV</p><h5 id="主要进阶数值："><a href="#主要进阶数值：" class="headerlink" title="主要进阶数值："></a>主要进阶数值：</h5><p>基差=现货-期货 （–期货升水 +期货贴水）<br>金银现货价格比=金/银 （外盘伦敦 内盘上海）<br>内外盘价差=|内盘金-外盘金| &amp; |内盘银-外盘银|  （注意单位换算）<br>TED利差=3月期liber – 3月期美国国债  （数值越高则风险越大市场恐慌越强）<br>VIX指数=芝加哥期权交易所公布的标普500期权隐含波动率  （数值越高则恐慌越强）</p><h5 id="主要图表："><a href="#主要图表：" class="headerlink" title="主要图表："></a>主要图表：</h5><p>金价美元对比：伦敦金现货价&amp;美元指数<br>金价油价对比：纽约金(comex黄金)期货价&amp;纽约原油(nymex轻质原油)期货价<br>金持仓：SPDR持仓量&amp;伦敦金现货价</p><h5 id="价格影响因素："><a href="#价格影响因素：" class="headerlink" title="价格影响因素："></a>价格影响因素：</h5><p>1）美国经济：反相关。经济数据或信心指数越低，则贵金属利多。<br>2）美国通胀：正相关。通胀数据越高，则贵金属利多。<br>3）避险需求：正相关。最近主要表现为朝鲜地缘政治。其他常见有恐怖袭击等。<br>4）美元指数：反相关。最近主要关注加息预期(美元收益越高则贵金属承压)。<br>5）基金持仓：正相关。黄金基金的加仓或减仓影响市场情绪偏多或偏空。注：美元基金则反相关。</p><h4 id="分析框架"><a href="#分析框架" class="headerlink" title="分析框架"></a>分析框架</h4><h5 id="市场表现："><a href="#市场表现：" class="headerlink" title="市场表现："></a>市场表现：</h5><p>1）基础：内盘+外盘 期货+现货 价+量<br>2）进阶：内外盘价差、期现货基差、金银现货价比</p><h5 id="影响因素："><a href="#影响因素：" class="headerlink" title="影响因素："></a>影响因素：</h5><p>1）美国经济[反]：宏观数据(增长/信心)[定量]、政策预期[定性]。<br>2）美国通胀[正]：宏观数据(CPI)[定量]。<br>3）风险恐慌[正]：市场风险(TED/VIX)[定量]、地缘政治与恐袭等[定性]。<br>4）美元强弱[反]：汇率指数(美元指数)[定量]、利息高低(国债收益/加息预期)[定量/性]。<br>5）投资持仓[正]：投机持仓(CFTC非商业净多)[定量]、巨头持仓(SPDR/iShareSLV)[定量]。</p>]]></content>
      
      
      <categories>
          
          <category> Eco </category>
          
          <category> Method </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>宏观数据体系与分析框架</title>
      <link href="/2020/06/02/eco-method-macro-data-analysis-notes/"/>
      <url>/2020/06/02/eco-method-macro-data-analysis-notes/</url>
      
        <content type="html"><![CDATA[<h4 id="宏观数据指标"><a href="#宏观数据指标" class="headerlink" title="宏观数据指标"></a>宏观数据指标</h4><p>脉络：<br>美国-发达市场-新兴市场-中国</p><p>分析结构：<br>看<strong>增长</strong>：三驾马车 消费投资出口</p><p>分短期和长期数据：<br>长期：GDP是季度公布，分为消费 最终消费，投资 最终资本形成，出口 货物服务净出口。<br>短期：月度数据工业增加值，其他参考消费 社会消费品零售，投资 固定资产投资，出口 外贸贸易差额。</p><p>短长期数据统计口径不同不完全一致：<br>社会消费品零售和最终消费的区别：前者不包含教育、医疗、住房、文艺娱乐等服务消费。<br>固定资产投资和最终资本形成的区别：前者包含了土地价值、旧建筑物价值等费用。<br>外贸贸易差额和货物服务净出口的区别：前者未包含服务进出口数据。</p><p>尽管长短期的三个数据不一致但依然要用短期数据，是因为短期只能用这些数据，也因此在预测的时候会引入另一个数据：工业增加值VAI。并将之作为月度GDP的经济指标来看。</p><p>CF：增长分为名义增长和实际增长，而决定二者差别的是<strong>价格</strong>因素。</p><p>价格指数：<br>在GDP层面去理解，是GDP平价指数；反映在投资中是投资品价格指数；反映在消费中是零售指数RPI。</p><p>此外，通常大家最为关心的价格指数是通胀指数消费品零售CPI和工业品出厂PPI。</p><p>以上是宏观经济分析中主要的指标，而看指标最终是看政策。<br>政策分为财政政策和货币政策。比如看通胀指数最终是判断货币政策的走向。</p><p>货币政策有5大工具6大指标：<br>6个指标：货币供应量（整个经济体需要的货币量）M1,M2 及5工具箱。<br>5个工具：信贷（对额度控制进行窗口指导）、利率、存款准备金率、公开市场操作 央票+正回购（短期流动性调节主要靠公开市场操作）、汇率。</p><p>财政政策是政府花多少钱关键看政府口袋里有多少钱：<br>财政部每月会公布财政收入数据，也会公布财政支出数据，其中财政支出包括政府消费、政府投资。这两个数据分别是与GDP中的最终消费、最终资本形成相关（因为中国GDP采用的是消费+投资+净出口，而非消费+投资+净出口+政府）。</p><p>以上是宏观经济指标结构，以下逐个详细分析。</p><p>详细分析：</p><p>消费：投资中以月度分析为主：社会零售消费品总额。<br>消费影响因素：居民收入增长。对应数据：城镇居民人均消费性支出（季度公布）。</p><p>其中，有分析意义的是分产品消费数据，体现出的消费结构。<br>比如其中的奢侈品项目（化妆品、金银珠宝、汽车类）的增速是否显著改变，反映消费结构是否升级。<br>比如其中的房地产相关项目（家具、建筑及装潢材料类）的数据对分析某地房地产市场销售繁荣是实际刚需还是投资繁荣具有参考价值。</p><p>投资：依然主看月度数据：固定资产投资。<br>投资影响因素较多较复杂：除经济增速外，还包含利率（资金成本）、房地产价格（占数据权重1/4）、信贷政策（政府投资和央企投资均与信贷关系密切，同时信贷政策往往直接反映政策倾向。）</p><p>投资的一些子指标也值得一看，主要包括：<br>比如房地产业投资，直接占固定资产投资的1/4，值得重点关注。其中又分两个数据：在建项目投资和新开工项目投资。这两个指标增速是非常重要的投资增速先行指标。<br>比如分行业投资如果有大幅增速，或对该行业投资机会有影响。</p><p>出口：仍主看月度数据：外贸进口出口数据。<br>出口影响因素：主看外需，尤其是发达体的经济形势（间接影响）和私人消费（直接影响）。经济形势的指标用：外部GDP（使用贸易加权）。私人消费的指标用：美国个人消费。</p><p>值得注意的子指标：<br>比如分行业的增速和占比的变动对分析出口结构升级有意义。<br>比如分目的地的增速和占比的变动尤其是新兴经济体对分析发达体经济危机对中国出口影响程度有意义。</p><p>除了三驾马车以外，判断经济增长另两个主要的指标是：工业增加值和发电量。<br>工业增加值的主要意义是，作为GDP的对标月度数据，结合修正月度的消费投资出口数据。<br>发电量的主要意义是，作为不可调整数据，结合修正其他可调整数据。</p><p>除了经济增长类指标外，货币流动性相关值得分析的指标有：</p><p>货币信贷数据，包括M1,M2,贷款,存款。<br>M0=现金<br>M1=M0+活期存款（非金融企业）+财政存款<br>M2=M1+定期存款（非金融企业）+居民储蓄<br>注：居民活期储蓄归属于M2而非M1<br>比喻式描述：M0是可现金交易的东西，M1是可开支票交易的东西，M2是整个宏观经济体的东西。2-0离实体经济越来越远。<br>引申：一切通胀问题都是货币形成的问题。CPI与M1 M2这些货币数据对比发现货币数据比通胀数据有领先效应，且M2领先更久月3个季度或11个月，M1更短约领先6个月。</p><p>通胀指数：CPI、PPI<br>（待后面案例详解）</p><p>采购经理人指数PMI<br>每月1号公布先行指标，注意是环比指标，大小于50是跟上年同月比。</p><p>财政收入<br>反映政府实行财政政策的财力保障。</p><p>主要宏观数据公布时间：</p><table border="0" cellpadding="0" cellspacing="0" width="517" style="border-collapse: collapse;table-layout:fixed;width:388pt"> <col class="xl1526940" width="79" style="mso-width-source:userset;mso-width-alt: 2816;width:59pt"> <col width="153" style="mso-width-source:userset;mso-width-alt:5432;width:115pt"> <col width="152" style="mso-width-source:userset;mso-width-alt:5404;width:114pt"> <col width="133" style="mso-width-source:userset;mso-width-alt:4721;width:100pt"> <tr height="19" style="height:14.4pt">  <td height="19" class="xl6526940" width="79" style="height:14.4pt;width:59pt"><span lang="EN-US">　</span></td>  <td class="xl6626940" width="153" style="border-left:none;width:115pt">经济指标</td>  <td class="xl6626940" width="152" style="border-left:none;width:114pt">公布机构</td>  <td class="xl6626940" width="133" style="border-left:none;width:100pt">公布时间</td> </tr> <tr height="20" style="height:15.0pt">  <td rowspan="7" height="136" class="xl6726940" width="79" style="height:102.6pt;  border-top:none;width:59pt">月度数据</td>  <td class="xl6826940" width="153" style="border-top:none;border-left:none;  width:115pt"><span lang="EN-US">PMI</span></td>  <td class="xl6726940" width="152" style="border-top:none;border-left:none;  width:114pt">中国物流与采购联合会</td>  <td class="xl6926940" width="133" style="border-top:none;border-left:none;  width:100pt">每月<font class="font526940">1</font><font class="font626940">日</font></td> </tr> <tr height="20" style="height:15.0pt">  <td height="20" class="xl6926940" width="153" style="height:15.0pt;border-top:none;  border-left:none;width:115pt">进口和出口</td>  <td class="xl6726940" width="152" style="border-top:none;border-left:none;  width:114pt">海关总署</td>  <td class="xl6926940" width="133" style="border-top:none;border-left:none;  width:100pt">每月<font class="font526940">10</font><font class="font626940">日前</font></td> </tr> <tr height="20" style="height:15.0pt">  <td height="20" class="xl6926940" width="153" style="height:15.0pt;border-top:none;  border-left:none;width:115pt">货币信贷数据</td>  <td class="xl6726940" width="152" style="border-top:none;border-left:none;  width:114pt">央行</td>  <td class="xl6926940" width="133" style="border-top:none;border-left:none;  width:100pt">每月<font class="font526940">10</font><font class="font626940">日左右</font></td> </tr> <tr height="19" style="height:14.4pt">  <td height="19" class="xl6926940" width="153" style="height:14.4pt;border-top:none;  border-left:none;width:115pt">工业增加值</td>  <td rowspan="4" class="xl6726940" width="152" style="border-top:none;width:114pt">统计局</td>  <td rowspan="4" class="xl6926940" width="133" style="border-top:none;width:100pt">每月<font class="font526940">11</font><font class="font626940">日左右</font></td> </tr> <tr height="19" style="height:14.4pt">  <td height="19" class="xl6926940" width="153" style="height:14.4pt;border-top:none;  border-left:none;width:115pt">社会消费品零售总额</td> </tr> <tr height="19" style="height:14.4pt">  <td height="19" class="xl6926940" width="153" style="height:14.4pt;border-top:none;  border-left:none;width:115pt">固定资产投资</td> </tr> <tr height="19" style="height:14.4pt">  <td height="19" class="xl6826940" width="153" style="height:14.4pt;border-top:none;  border-left:none;width:115pt"><span lang="EN-US">CPI &amp; PPI</span></td> </tr> <tr height="20" style="height:15.0pt">  <td rowspan="2" height="40" class="xl6726940" width="79" style="height:30.0pt;  border-top:none;width:59pt">季度数据</td>  <td class="xl6826940" width="153" style="border-top:none;border-left:none;  width:115pt"><span lang="EN-US">GDP<font class="font626940">及其他季度数据</font></span></td>  <td rowspan="2" class="xl6726940" width="152" style="border-top:none;width:114pt">统计局</td>  <td class="xl6926940" width="133" style="border-top:none;border-left:none;  width:100pt">每季<font class="font526940">15</font><font class="font626940">日左右</font></td> </tr> <tr height="20" style="height:15.0pt">  <td height="20" class="xl6926940" width="153" style="height:15.0pt;border-top:none;  border-left:none;width:115pt">工业企业利润</td>  <td class="xl6826940" width="133" style="border-top:none;border-left:none;  width:100pt"><span lang="EN-US">3/6/9/12<font class="font626940">月末</font></span></td> </tr> <![if supportMisalignedColumns]> <tr height="0" style="display:none">  <td width="79" style="width:59pt"></td>  <td width="153" style="width:115pt"></td>  <td width="152" style="width:114pt"></td>  <td width="133" style="width:100pt"></td> </tr> <![endif]></table><p> <br>案例：通胀分析<br>背景：我国CPI，食品占1/3，非食品2/3。cf: 美国CPI食品占1/10。<br>预测思路：不可能自下而上从每一个分项去预测，而是一般直接分成食品和非食品两大类来分析和预测。我国因为非食品变化很小，历史上通缩最严重时候仅-2通胀最严重时候仅+2.5（我国由于常年产能过剩下游竞争激烈因此企业在销售价格上很难直接从制造成本传导到消费上来），主要影响CPI的是食品类，历史上通胀最严重时超过+20。<br>而分析食品：农产品方面我国基本是自给自足，除了大豆70%进口，小麦玉米少量进口也少量出口。<br>因此中长期预测：进口谷物品种按占比以国际市场对应品种期货价格变动，其他自给农产品以国内市场批发零售价格变动，来作为预测大框架。加入特殊品种调节因素，比如猪肉在国内消费中有特殊地位需单独分析，按照猪粮价6倍比作为猪肉未来变动方向的判断因素。<br>短期每月预测：商务部每周和农业部每天会公布国内农产品价格指数，其中实际预测发现商务部价格环比对CPI的拟合比较好。<br>非食品部分预测：CPI非食品通过PPI来传导。PPI（因为目前制造能源和矿产主要靠进口）通过国际大宗商品价格走势来影响。注意不同价格之间有领先效应：油价领先其他大宗商品价格约1个月，其他大宗商品价格领先PPI约1个月，因此通常可以用前几个月油价来预测本月PPI和非食品CPI。</p><h4 id="宏观分析框架"><a href="#宏观分析框架" class="headerlink" title="宏观分析框架"></a>宏观分析框架</h4><p>美国宏观经济分析：</p><p>美国GDP里最大头是消费(占2/3)，其次是政府支出，第三是投资，最末是出口(一般是负)。<br>消费：是经济的同步指标。因为消费太大了，居民消费和经济增速完全一致。<br>政府支出：是经济的滞后指标和反向指标。滞后约2年因为从收上来钱到花掉时滞约1-2年，同时如遇经济危机，财政被迫加码，因此在危机时又是一个反向指标。<br>投资：分为三块：存货投资、地产投资、非地产投资(可理解为企业投资)。存货投资比例虽小但是领先指标，领先约1-2年，通常我们发现美国在经济衰退前1-2年存货已经开始负增长。地产投资也是重要领先指标，领先约1-2年，通常美国历史上每次危机前1-2年住宅投资已经负增长。企业投资是同步或滞后指标，因为危机发生后企业首先反应是活下去因此削减投资而非冒险增加投资。<br>出口：彻底的反向指标。只要美国经济好，净出口指标一定是负的。</p><p>美国的货币供应量和经济在上世纪下半叶开始不再相关。早期GDP与M2正相关，后来随着金融衍生品的发展，消费所需的钱不再局限于现金支票而是包括了存款包括了房产或其他资产增值部分，因此GDP只与居民总资产而不与货币量相关。</p><p>由于货币供应量的失效，美国的货币政策关键是利率，也因此全世界都对美国加息极其敏感。<br>美国的经济周期与利率周期高度相关。在央行未出现前，利率是一个滞后指标，经济衰退，则个人不愿消费企业不愿投资，资金供大于求，利率下降；经济复苏，则个人不愿储蓄企业踊跃投资，资金供不应求，利率上升。而央行出现后，利率是一个领先指标，由于无法忍受经济衰退，因此在经济衰退时会快速降息，经济转好以后缓慢加息，从而改变利率周期并间接影响经济周期。</p><p>中国宏观经济分析：</p><p>宏观经济有两种分析方法，一种是支出法，也就是消费投资出口，前面分析美国的那套；另一种是生产法，从上中下游一二三产业来看经济。国内用生产法来看经济非常重要，尤其是房地产和汽车产业。</p><p>用支出法的问题在于，由于消费稳定，经济增长最大的影响因素是投资，但投资很多时候和经济不是同向的。解决思路是不能看总投资要看投资分项。投资分为地产、基建、制造、服务4大块投资，国内一般看前3项。其中地产投资与经济增长是最有效的同向指标，基建投资和经济增长是反向指标，制造投资和经济增长也是同向指标。<br>再看消费，消费一般大家看的是社会消费品零售总额，但这是一个伪数据，因为不可能统计到每一个小商小贩全体，所以这个数据是对500万以上商贩全额统计，500万以下商贩抽样统计，而抽样就会存在误差，所以会发现看社会消费品零售总额和经济增长并不是同向的。但如果看非抽样的统计数据，同样是统计局发布的限额以上企业商品零售额数据（只统计500万以上的商贩全体），则能看到即使在08年的时候也明显呈现出了同向相关性。同时限额以上数据有一个好处是它是有分行业的，大类耐用品和非耐用品各占一半，小类汽车在耐用品里占了2/3，所以汽车消费和经济增长高度相关。<br>总结：看经济增长，用支出法，投资看地产投资，消费看汽车消费。而当经济增长与产业高度相关时，就可以考虑不如用生产法来看经济了。</p><p>生产法：当前我国经济里工业依然是最重头，看工业有三个主要数据。一个是工业增加值，这个不用说，每个月中旬出；二个是发电量，这个和工业增加值是同步指标而且月初就出了；三个是PMI，这个受情绪影响大看过就好。<br>此外有一个值得特别关注是数据是地产销售数据，这个主要100个城市的土地交易中心每天都会公布，并且地产销售是一个领先指标，领先大约半年。因为从拿地到钢铁水泥进场大约有半年的时滞，研究土地成交对于下游这些行业的变化有重要意义。<br>总结：看经济增长，用生产法，主要看发电量这个同步指标，和地产销售这个领先指标。</p><p>金融指标仍对经济增长有相关性么？NO<br>金融指标有两个统计口径，一个口径是看货币（M1,M2等）这是金融机构的负债，一个口径是看融资（信贷,社会融资总额等）这是金融机构的资产也即资金使用方式。<br>融资角度指标：<br>信贷过去与经济高度相关，后来不相关了，因为融资渠道增多，信贷只占约一半。<br>社会融资总量在09-13年与经济高度相关，后来不相关了，因为未包含政府融资。而由于这两年政府做了大量债务置换，现在一个月政府发债规模1万亿，贷款规模也才1万亿。<br>货币角度指标：<br>M1因为在中国的统计口径只包含企业活期存款不包括居民活期存款，所以过去和经济高度相关，但现在无效了，因为现在有协存有回购有货基已经没人存活期。<br>M2也曾有效，但现在已无效，因为大部分居民用银行理财替代定期存款，而理财未包含在M2的统计口径里。</p><p>为什么那么多指标过去有效而现在都失效了？因为经济转型了。<br>为什么经济会转型？因为人口老龄化了。<br>具体分析：<br>15-65岁的工作年龄劳动力下降，导致两个变化：1是经济增长放缓，2是消费结构从房车转向医疗。<br>人口导致经济增长放缓因为：经济增长的三驱动力：资本、技术、劳动力。<br>人口导致消费结构改变因为：年轻人热爱消费房车，中老年热爱消费医疗养老。<br>出路：人口虽减少，但质量提高，因此应向创新转型，向服务消费转型。发展创新产业、医疗教育文娱产业。</p><p>但经济转型不能说转就转，最大的坎在于GDP不能掉，因此投资所占比越来越重，现在已经达到GDP的80%，但靠投资稳增长的副作用是货币超发（M2增速13%，GDP增速7%，多出来的部分都是超发的货币）。<br>货币超发导致了三个结果：房价上涨（与M2高度相关）；债务上升（企业部门和政府部门都有）；汇率贬值。</p><p>解决问题的核心就是降低负债率，即去杠杆。负债率=GDP/负债，可能的解决模式有：<br>1）    日本模式：降息，从而降低债务扩张速度。但过去两年降息效果并不明显。原因：从日本来看，居民和企业虽然减了负债，但政府部门增了负债，加总起来负债还是上升的。行不通。<br>2）    美国模式：债务剥离，又称债务减记。这个方案很险因为会导致大量破产和失业。美国曾经放手让雷曼倒了，但之后是10%以上的失业率。很危险。<br>3）    俄罗斯模式：通胀，从而让分母名义GDP膨胀起来。这个方案的副作用是不利于创新，做啥都不如做房地产赚钱，于是实业凋敝。走不通。<br>4）    改革模式：货币紧缩，鼓励改革。15年初曾经准备改革但放水两轮以后，钢价上涨，钢铁产量创新高。放水是长痛，债务房价会继续推高；紧缩是短痛，问题能解决但短期债务房价都会出问题。是个选择题。</p><p>从宏观经济到投资配置：<br>美林投资时钟理论：经济好坏，物价涨跌，构成4象限。<br>经济降，物价跌：衰退期(2008下半年次贷危机后)：配置债券(经济差-降息-债券涨)。收益率：债券&gt;现金&gt;股票&gt;大宗商品。<br>经济升，物价跌：复苏期(2009上半年开始)：配置股票(经济好企业有盈利,通胀低央妈宽松有流动性估值提升)。收益率：股票&gt;债券&gt;现金&gt;大宗商品。<br>经济升，物价涨：过热期(2009下半年开始)：配置大宗和少量股票(通胀价格上升推动大宗商品上升,通胀高加息不利债券, 经济升企业有盈利但通胀高央妈紧缩不利股市流动性估值下降)。收益率：大宗商品&gt;股票&gt;现金/债券。<br>经济降，物价涨：滞涨期(2010以后)：配置黄金和大宗(黄金抗通胀,大宗随通胀,通胀加息不利债券,经济差盈利差不利股市通胀央妈紧缩不利股市流动性估值)。收益率：现金&gt;大宗商品/债券&gt;股票。</p><p>辨析：巴菲特说黄金不创造价值不值得投资？<br>钱本身都是不创造价值的，包括黄金，包括纸币(美元)。<br>但黄金的价值是经济增长的价值的机会成本。换言之，经济增长，黄金跑不赢经济；经济衰退，黄金跑赢经济。<br>同时黄金的价值还体现在对抗贬值。举例：美国100年间平均货币增速6%，平均经济增速3%，而6%-3%=3%正好是美元兑黄金的贬值。<br>所以滞涨的时候，黄金是最佳的配置品种。</p><p>辨析：为何滞涨？<br>经济是下行的，需求是固定的甚至减少的，价格上涨是减少供给形成的表象。<br>但靠减少供给来涨价是有天花板的。<br>当天花板到来，价格回落，滞涨进入衰退。</p><p><em>Credit: 观点整理自徐剑、姜超</em></p>]]></content>
      
      
      <categories>
          
          <category> Eco </category>
          
          <category> Method </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macroeconomics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Game Design Document of Judas&#39; Trial</title>
      <link href="/2020/05/25/game-project-documents-judas-trial/"/>
      <url>/2020/05/25/game-project-documents-judas-trial/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GDD </tag>
            
            <tag> Judas&#39; Trial </tag>
            
            <tag> Game Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Frequent Use C# Scripts in Unity Game Dev I</title>
      <link href="/2020/05/25/tech-lib-unity-c#/"/>
      <url>/2020/05/25/tech-lib-unity-c#/</url>
      
        <content type="html"><![CDATA[<h3 id="调用UnityEngine-Events的触发交互类脚本"><a href="#调用UnityEngine-Events的触发交互类脚本" class="headerlink" title="调用UnityEngine.Events的触发交互类脚本"></a>调用UnityEngine.Events的触发交互类脚本</h3><p>游戏的一个关键机制是交互。玩家进入某片区域或者碰撞某个物体，触发特定游戏事件，游戏做出反馈。<br>虽然也可以每个事件都独立写一个完整的脚本，但这样对一个哪怕不大的游戏来说也会是一个浩大的工程量。一个基本的省力思路是把这样的需求拆成两部分，一部分是做触发，一部分是做反馈，这样每个事件可以使用一个触发类脚本和一个反馈类脚本，来共同构成这个事件。<br>触发类按照Unity引擎的特点大致可以分为两大类，一类是trigger，即进/出某个区域，一类是collision，即碰撞某个物体。除此之外，还会用到的触发机制包括按某个键盘上的按键或鼠标点击，通常这并不单用，而是与trigger或collision结合起来用，比如进入某可收集物品有效范围内并右键点击可拾取。通常，在做游戏的时候最好把这些触发都预写出来，然后在需要触发事件的时候挂上去，再修改其中导向反馈的参数就可以了。<br>反馈类的基本思路是尽可能调用Unity引擎的事件系统，事件系统里本身自带了一些基本的诸如让某个物品激活，或者让某个物品失活的预制选项，活用这些选项就可以完成好些游戏事件的反馈了。而对于事件系统里没有自带的，也可以通过写一个脚本挂上去来自定义，比如读取触发时的某几项数值，并根据事件类型增减数值，或者跳转场景等等，这个后面具体总结，这里先总结不同类型的导向引擎事件系统的触发脚本。</p><h4 id="区域触发交互"><a href="#区域触发交互" class="headerlink" title="区域触发交互"></a>区域触发交互</h4><p>这是用得最广的一种触发，进入某块区域弹出提示、进入某块区域小怪会主动攻击、进入某块区域玩家会掉血、进入某块区域玩家会获取物品等等都会用上它。一个兼容性强的基本写法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Events;</span><br><span class="line"></span><br><span class="line">[RequireComponent(typeof(Collider))]</span><br><span class="line">public class InteractOnTrigger : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">        public bool OnlyForOnce;</span><br><span class="line">        public LayerMask layers;</span><br><span class="line">        public UnityEvent OnEnter, OnExit;</span><br><span class="line">        new Collider collider;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        void Reset()</span><br><span class="line">        &#123;</span><br><span class="line">            layers = LayerMask.NameToLayer(<span class="string">"Everything"</span>);</span><br><span class="line">            collider = GetComponent&lt;Collider&gt;();</span><br><span class="line">            collider.isTrigger = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void OnTriggerEnter(Collider other)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (0 != (layers.value &amp; 1 &lt;&lt; other.gameObject.layer))</span><br><span class="line">            &#123;</span><br><span class="line">            ExecuteOnEnter(other);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void ExecuteOnEnter(Collider other)</span><br><span class="line">        &#123;</span><br><span class="line">            OnEnter.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        void OnTriggerExit(Collider other)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (0 != (layers.value &amp; 1 &lt;&lt; other.gameObject.layer))</span><br><span class="line">            &#123;</span><br><span class="line">                ExecuteOnExit(other);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected virtual void ExecuteOnExit(Collider other)</span><br><span class="line">        &#123;</span><br><span class="line">            OnExit.Invoke();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (OnlyForOnce == <span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            Destroy(gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几点说明：<br>1.设置了要求物件上必须有collider否则会报错，方便万一忘了挂容易发现。<br>2.设置了检测是否触发的物品所处layer，这是一个超级实用的功能，这里预设的是所有层都算触发trigger，实际用的时候需要选，选这个能解决很多问题，比如某个路障阻止玩家通过但不阻止小怪通过，比如子弹碰到小怪会扣血但玩家碰到小怪不掉血，这些只需要设定只有与某个layer的交互才算触发就行了。另外，用layer能解决一个父子物体的bug,即实际中如果把很多不同的trigger放在一个父物体下，那么会出一个没有碰到指定trigger，而是碰到它的父物体也会触发trigger的bug，而用layer把父物体和子物体分属不同layer就可以规避掉这个bug了。<br>3.设置了一个是否只可触发单次的选项框，虽然这个功能并非必须，也可以手动的把OnExit的事件里设置一个销毁物件来实现，但因为会有很多只可单次触发的事件，只需勾选一下，和需添加一个OnExit事件对比起来还是要减轻许多机械劳动了。</p><h4 id="按键触发交互"><a href="#按键触发交互" class="headerlink" title="按键触发交互"></a>按键触发交互</h4><p>Unity里自带了很多基本设置按键，比如W S A D一类的，这些可以直接进行自定义调整。但有时在特定的情况下需要一些特定的按键，比如某个过场动画按回车跳过，这时就需要手动设置一个按键触发脚本。和其它脚本不同的是，按键脚本的KeyCode没法留空然后在使用时输入特定字符串来实现自定义，unity会报错，因此只能一个按钮一个脚本。但毕竟只是一个创建脚本副本修改两个字符串就完成的工作，而且这样的按键交互情况并不多，如果真的很多，那就需要倒回头去考虑这样的游戏设计是否合理了——毕竟需要玩家记住一大串非主流按键是一件很不游戏的事情。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Events;</span><br><span class="line"></span><br><span class="line">public class InteractOnButtonZ : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public UnityEvent OnButtonPress;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line"></span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetKeyDown(KeyCode.Z))</span><br><span class="line">        &#123;</span><br><span class="line">            OnButtonPress.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按键是鼠标而非键盘，只需把相应语句修改为下面语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Input.GetMouseButtonDown(0))</span><br></pre></td></tr></table></figure><p>即可，其中0代表左键，1代表右键，2代表中键。</p><h4 id="碰撞触发交互"><a href="#碰撞触发交互" class="headerlink" title="碰撞触发交互"></a>碰撞触发交互</h4><p>和trigger类似，collision是另一种常见的触发机制，但我个人不是很爱用这个，因为感觉unity引擎在检测碰撞上问题不大，但在碰撞触发上就经常不太灵敏，事件触发不了，这有可能是设定如此，也可能是检测不到，有人总结过<a href="https://blog.csdn.net/candycat1992/article/details/8942343" target="_blank" rel="noopener">触发机制</a>，但也提到测试出来经常不是触发机制理论上那样，看来这是一个普遍问题。因此除了少部分确实必须通过碰撞来触发的以外，我都更喜欢用trigger来实现，比如和npc对话，虽然可以做成玩家的gameobject和npc的gameobject碰撞触发对话，但有时就干脆在npc的gameobject上面挂一个比npc大一大圈的collider设置为trigger，把触发机制设置为玩家进入trigger区域了。虽然如此，还是有一些用trigger不如collision方便的情景，因此碰撞交互的脚本一般也会简单写一个放在script里，以免偶尔需要用上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Events;</span><br><span class="line"></span><br><span class="line">[RequireComponent(typeof(Collider))]</span><br><span class="line">public class InteractOnCollision : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public LayerMask layers;</span><br><span class="line">    public UnityEvent OnCollision;</span><br><span class="line"></span><br><span class="line">    void Reset()</span><br><span class="line">    &#123;</span><br><span class="line">        layers = LayerMask.NameToLayer(<span class="string">"Everything"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnCollisionEnter(Collision c)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(c);</span><br><span class="line">        <span class="keyword">if</span> (0 != (layers.value &amp; 1 &lt;&lt; c.transform.gameObject.layer))</span><br><span class="line">        &#123;</span><br><span class="line">            OnCollision.Invoke();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="触发事件后的数值增减类脚本"><a href="#触发事件后的数值增减类脚本" class="headerlink" title="触发事件后的数值增减类脚本"></a>触发事件后的数值增减类脚本</h3><p>前面的脚本完成了对触发的认定，而一旦确认触发事件后，游戏需给出相应反馈，对于触发条件刷出物品或激活行为类，往往用unity的事件系统激活相应gameobject就可以了。但仍有很多类型的事件会更复杂，也不在unity事件系统中有预设，这里先总结一类在很多游戏类别中都一定会用到的事件类型：数值的增减。在rpg和fps中，它表现为玩家和怪物的生命值，以及玩家的得分，而在策略游戏中数值的类别会更多。</p><p>数值增减类的脚本由两类脚本构成，一类是对数值的定义，并且设定初始值，以及定义数值增减的规则，这个脚本是挂在这个数值所属主体身上的，大部分时候来说这个主体是玩家，另一类是对特定事件的数值增减设定，这个脚本和触发脚本一样是挂在触发物体上的，在认定玩家触发了这个事件时，执行数值变更。以玩家生命值举例，第一类脚本的基本写法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.SceneManagement;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line">public class Health : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public enum deathAction &#123; loadLevelWhenDead, doNothingWhenDead &#125;;</span><br><span class="line"></span><br><span class="line">    public <span class="built_in">float</span> healthPoints = 10f;</span><br><span class="line">    public <span class="built_in">float</span> respawnHealthPoints = 10f;      //base health points</span><br><span class="line"></span><br><span class="line">    public int numberOfLives = 1;                   //lives and variables <span class="keyword">for</span> respawning</span><br><span class="line">    public bool isAlive = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    public Slider slider;</span><br><span class="line"></span><br><span class="line">    public GameObject explosionPrefab;</span><br><span class="line"></span><br><span class="line">    public deathAction onLivesGone = deathAction.doNothingWhenDead;</span><br><span class="line"></span><br><span class="line">    public string LevelToLoad = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    private Vector3 respawnPosition;</span><br><span class="line">    private Quaternion respawnRotation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Start is called before the first frame update</span><br><span class="line">    void Start()</span><br><span class="line">    &#123;</span><br><span class="line">        // store initial position as respawn location</span><br><span class="line">        respawnPosition = transform.position;</span><br><span class="line">        respawnRotation = transform.rotation;</span><br><span class="line"></span><br><span class="line">        slider.value = 1.0f;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (LevelToLoad == <span class="string">""</span>) // default to current scene </span><br><span class="line">        &#123;</span><br><span class="line">            LevelToLoad = SceneManager.GetActiveScene().name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Update is called once per frame</span><br><span class="line">    void Update()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (healthPoints &lt;= 0)</span><br><span class="line">        &#123;               // <span class="keyword">if</span> the object is <span class="string">'dead'</span></span><br><span class="line">            numberOfLives--;                    // decrement <span class="comment"># of lives, update lives GUI</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (explosionPrefab != null)</span><br><span class="line">            &#123;</span><br><span class="line">                Instantiate(explosionPrefab, transform.position, Quaternion.identity);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (numberOfLives &gt; 0)</span><br><span class="line">            &#123; // respawn</span><br><span class="line">                transform.position = respawnPosition;   // reset the player to respawn position</span><br><span class="line">                transform.rotation = respawnRotation;</span><br><span class="line">                healthPoints = respawnHealthPoints; // give the player full health again</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123; // here is <span class="built_in">where</span> you <span class="keyword">do</span> stuff once ALL lives are gone)</span><br><span class="line">                isAlive = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                switch (onLivesGone)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> deathAction.loadLevelWhenDead:</span><br><span class="line">                        SceneManager.LoadScene(LevelToLoad);</span><br><span class="line">                        <span class="built_in">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> deathAction.doNothingWhenDead:</span><br><span class="line">                        // <span class="keyword">do</span> nothing, death must be handled <span class="keyword">in</span> another way elsewhere</span><br><span class="line">                        <span class="built_in">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Destroy(gameObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void ApplyDamage(<span class="built_in">float</span> amount)</span><br><span class="line">    &#123;</span><br><span class="line">        healthPoints = healthPoints - amount;</span><br><span class="line">        slider.value = (<span class="built_in">float</span>)healthPoints / respawnHealthPoints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void ApplyHeal(<span class="built_in">float</span> amount)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(healthPoints &lt; respawnHealthPoints)</span><br><span class="line">            &#123;</span><br><span class="line">                healthPoints = healthPoints + amount;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                healthPoints = respawnHealthPoints;</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        slider.value = (<span class="built_in">float</span>)healthPoints / respawnHealthPoints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void ApplyBonusLife(int amount)</span><br><span class="line">    &#123;</span><br><span class="line">        numberOfLives = numberOfLives + amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void updateRespawn(Vector3 newRespawnPosition, Quaternion newRespawnRotation)</span><br><span class="line">    &#123;</span><br><span class="line">        respawnPosition = newRespawnPosition;</span><br><span class="line">        respawnRotation = newRespawnRotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在设定基本赋值和加减的基础上，加了几个实用的小功能，包括生命条数&gt;1时阵亡后复活重刷的设定、阵亡的特效设定（需另配合特效）、生命值的血条设定（需另配合血条UI）、彻底阵亡后跳转场景设定（需另配合场景）。</p><p>继续这个生命值的例子，在玩家gameobject上挂了前面的脚本后，还需在所有会扣减玩家生命值的物体上挂一个脚本，来在触发事件时执行前面的脚本所定义的函数<code>ApplyDamage</code>，这个脚本的基本写法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line"></span><br><span class="line">public class Damage : MonoBehaviour </span><br><span class="line">&#123;</span><br><span class="line">    public <span class="built_in">float</span> damageAmount = 10.0f;</span><br><span class="line">    </span><br><span class="line">    public bool damageOnTrigger = <span class="literal">true</span>;</span><br><span class="line">    public bool damageOnCollision = <span class="literal">false</span>;</span><br><span class="line">    public bool continuousDamage = <span class="literal">false</span>;</span><br><span class="line">    public <span class="built_in">float</span> continuousTimeBetweenHits = 0;</span><br><span class="line"></span><br><span class="line">    public bool destroySelfOnImpact = <span class="literal">false</span>;    </span><br><span class="line">    public <span class="built_in">float</span> delayBeforeDestroy = 0.0f;</span><br><span class="line">    public GameObject explosionPrefab;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">float</span> savedTime = 0;</span><br><span class="line"></span><br><span class="line">    void OnTriggerEnter(Collider collision)      // used <span class="keyword">for</span> things like bullets, <span class="built_in">which</span> are triggers.  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (damageOnTrigger) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (this.tag == <span class="string">"PlayerBullet"</span> &amp;&amp; collision.gameObject.tag == <span class="string">"Player"</span>) // <span class="keyword">if</span> the player got hit with its own bullets, ignore it</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (collision.gameObject.GetComponent&lt;Health&gt; () != null) </span><br><span class="line">                    &#123; </span><br><span class="line">                        // <span class="keyword">if</span> the hit object has the Health script on it, deal damage</span><br><span class="line">                        collision.gameObject.GetComponent&lt;Health&gt; ().ApplyDamage (damageAmount);</span><br><span class="line">        </span><br><span class="line">                        <span class="keyword">if</span> (destroySelfOnImpact) </span><br><span class="line">                            &#123;</span><br><span class="line">                                Destroy (gameObject, delayBeforeDestroy);     // destroy the object whenever it hits something</span><br><span class="line">                            &#125;</span><br><span class="line">            </span><br><span class="line">                        <span class="keyword">if</span> (explosionPrefab != null) </span><br><span class="line">                            &#123;</span><br><span class="line">                                Instantiate (explosionPrefab, transform.position, transform.rotation);</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void OnCollisionEnter(Collision collision)      // this is used <span class="keyword">for</span> things that explode on impact and are NOT triggers</span><br><span class="line">    &#123;   </span><br><span class="line">        <span class="keyword">if</span> (damageOnCollision) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (this.tag == <span class="string">"PlayerBullet"</span> &amp;&amp; collision.gameObject.tag == <span class="string">"Player"</span>) // <span class="keyword">if</span> the player got hit with its own bullets, ignore it</span><br><span class="line">                <span class="built_in">return</span>;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (collision.gameObject.GetComponent&lt;Health&gt; () != null) </span><br><span class="line">                    &#123; </span><br><span class="line">                        // <span class="keyword">if</span> the hit object has the Health script on it, deal damage</span><br><span class="line">                        collision.gameObject.GetComponent&lt;Health&gt; ().ApplyDamage (damageAmount);</span><br><span class="line">            </span><br><span class="line">                        <span class="keyword">if</span> (destroySelfOnImpact) </span><br><span class="line">                            &#123;</span><br><span class="line">                                Destroy (gameObject, delayBeforeDestroy);     // destroy the object whenever it hits something</span><br><span class="line">                            &#125;</span><br><span class="line">            </span><br><span class="line">                        <span class="keyword">if</span> (explosionPrefab != null) </span><br><span class="line">                            &#123;</span><br><span class="line">                                Instantiate (explosionPrefab, transform.position, transform.rotation);</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void OnTriggerStay(Collider collision) // this is used <span class="keyword">for</span> damage over time things</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (continuousDamage) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (collision.gameObject.tag == <span class="string">"Player"</span> &amp;&amp; collision.gameObject.GetComponent&lt;Health&gt; () != null) </span><br><span class="line">                    &#123; </span><br><span class="line">                        // is only triggered <span class="keyword">if</span> whatever it hits is the player</span><br><span class="line">                        <span class="keyword">if</span> (Time.time - savedTime &gt;= continuousTimeBetweenHits) </span><br><span class="line">                            &#123;</span><br><span class="line">                                savedTime = Time.time;</span><br><span class="line">                                collision.gameObject.GetComponent&lt;Health&gt; ().ApplyDamage (damageAmount);</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑了三种触发情况，一种是进入区域触发扣血，一种是碰撞触发扣血，一种是在区域内持续扣血。触发检测除了是否进入区域/产生碰撞/在区域内以外，注意持续掉血这个是用的trigger而不是collision，主要是因为实际做起来collision的触发不如trigger准确，但需注意如果要设置在某个区域比如岩浆里持续掉血，那么就需要把触发机制设置为trigger才行。和前面说到的layer的用法类似，这里用了tag来区分那些会会触发和不会触发的碰撞物体。另外考虑了自爆怪的情况，可以设置小怪在产生攻击后消失，消失可以设特效（需另配合特效），这在做那种玩家没有武器需要通过走位引导小怪互相攻击的机制时很有用。</p><p>继续这个例子，除了生命数值扣减以外，另一种情形是生命数值增加，类似于吃血包或者在持续回血buff区域停留，和扣减的脚本类似，增加的脚本可以写作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class HealPlayer : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="built_in">float</span> healAmount = 5.0f;</span><br><span class="line"></span><br><span class="line">    public bool healOnTrigger = <span class="literal">true</span>;</span><br><span class="line">    public bool healOnCollision = <span class="literal">false</span>;</span><br><span class="line">    public bool continuousHeal = <span class="literal">true</span>;</span><br><span class="line">    public <span class="built_in">float</span> continuousTimeBetweenHits = 1.0f;</span><br><span class="line"></span><br><span class="line">    public bool destroySelfOnImpact = <span class="literal">false</span>;    </span><br><span class="line">    public <span class="built_in">float</span> delayBeforeDestroy = 0.0f;</span><br><span class="line">    public GameObject explosionPrefab;</span><br><span class="line"></span><br><span class="line">    private <span class="built_in">float</span> savedTime = 0.0f;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    void OnTriggerEnter(Collider collision)             </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (healOnTrigger)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.tag == <span class="string">"Buff"</span> &amp;&amp; collision.gameObject.tag == <span class="string">"Player"</span>) </span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (collision.gameObject.GetComponent&lt;Health&gt;() != null)</span><br><span class="line">                &#123;   </span><br><span class="line">                    collision.gameObject.GetComponent&lt;Health&gt;().ApplyHeal(healAmount);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (destroySelfOnImpact)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Destroy(gameObject, delayBeforeDestroy);    </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (explosionPrefab != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Instantiate(explosionPrefab, transform.position, transform.rotation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnCollisionEnter(Collision collision)                 </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (healOnCollision)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.tag == <span class="string">"Buff"</span> &amp;&amp; collision.gameObject.tag == <span class="string">"Player"</span>) </span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (collision.gameObject.GetComponent&lt;Health&gt;() != null)</span><br><span class="line">                &#123;   </span><br><span class="line">                    collision.gameObject.GetComponent&lt;Health&gt;().ApplyHeal(healAmount);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (destroySelfOnImpact)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Destroy(gameObject, delayBeforeDestroy);     </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (explosionPrefab != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Instantiate(explosionPrefab, transform.position, transform.rotation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnTriggerStay(Collider collision)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (continuousHeal)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (collision.gameObject.tag == <span class="string">"Player"</span> &amp;&amp; collision.gameObject.GetComponent&lt;Health&gt;() != null)</span><br><span class="line">            &#123;   </span><br><span class="line">                <span class="keyword">if</span> (Time.time - savedTime &gt;= continuousTimeBetweenHits)</span><br><span class="line">                &#123;</span><br><span class="line">                    collision.gameObject.GetComponent&lt;Health&gt;().ApplyHeal(healAmount);</span><br><span class="line">                    savedTime = Time.time;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一个脚本是增加重生机会，和前两个脚本类似，分trigger和collision触发两种，只是没有持续增加功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class AddLife : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public <span class="built_in">float</span> bonusLifeAmount = 1.0f;</span><br><span class="line"></span><br><span class="line">    public bool addOnTrigger = <span class="literal">true</span>;</span><br><span class="line">    public bool addOnCollision = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    public bool destroySelfOnImpact = <span class="literal">false</span>;    </span><br><span class="line">    public <span class="built_in">float</span> delayBeforeDestroy = 0.0f;</span><br><span class="line">    public GameObject explosionPrefab;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    void OnTriggerEnter(Collider collision)             </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (addOnTrigger)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.tag == <span class="string">"Bonus"</span> &amp;&amp; collision.gameObject.tag == <span class="string">"Player"</span>) </span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (collision.gameObject.GetComponent&lt;Health&gt;() != null)</span><br><span class="line">                &#123;   </span><br><span class="line">                    collision.gameObject.GetComponent&lt;Health&gt;().ApplyBonusLife(bonusLifeAmount);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (destroySelfOnImpact)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Destroy(gameObject, delayBeforeDestroy);    </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (explosionPrefab != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Instantiate(explosionPrefab, transform.position, transform.rotation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void OnCollisionEnter(Collision collision)                 </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (healOnCollision)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (this.tag == <span class="string">"Bonus"</span> &amp;&amp; collision.gameObject.tag == <span class="string">"Player"</span>) </span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (collision.gameObject.GetComponent&lt;Health&gt;() != null)</span><br><span class="line">                &#123;   </span><br><span class="line">                    collision.gameObject.GetComponent&lt;Health&gt;().ApplyBonusLife(bonusLifeAmount);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (destroySelfOnImpact)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Destroy(gameObject, delayBeforeDestroy);     </span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (explosionPrefab != null)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Instantiate(explosionPrefab, transform.position, transform.rotation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
          <category> Code Lib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> C# </tag>
            
            <tag> Unity </tag>
            
            <tag> Game Dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Study Notes I</title>
      <link href="/2020/05/25/tech-notes-c#/"/>
      <url>/2020/05/25/tech-notes-c#/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
          <category> Study Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后疫情时代的宏观经济观察与大类资产配置思考</title>
      <link href="/2020/05/25/eco-tracking-recent-macro-and-stg/"/>
      <url>/2020/05/25/eco-tracking-recent-macro-and-stg/</url>
      
        <content type="html"><![CDATA[<h3 id="宏观经济"><a href="#宏观经济" class="headerlink" title="宏观经济"></a>宏观经济</h3><h4 id="增长"><a href="#增长" class="headerlink" title="增长"></a>增长</h4><p><strong>当前数据</strong>：<br>今年一季度我国GDP-9.8%，4月份工业增加值3.9%，相比前月的-1.1%有显著修复。</p><p><strong>趋势因素</strong>：<br>IMF预测今年全球经济将萎缩3%。卖方预测中性情境下后三个季度的GDP分别2%、4%、6%，则全年GDP约3%左右。最大的影响因素是疫情对经济的停摆还会持续多久，对欧美国家而言，影响方式主要为直接影响，对我国而言，影响方式主要为外需疲弱的间接影响，以及对部分消费门类的直接影响。</p><h4 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h4><p><strong>当前数据</strong>：<br>今年前4个月我国的月度CPI同比分别为5.4%、5.2%、4.3%、3.3%，PPI分别为0.1%、-0.4%、-1.5%、-3.1%。</p><p>更新(6.10)：5月CPI继续回落，为2.4%，主要下降的是食品类，主因是复工所致的供给增加和餐饮门店客流量尚未完全恢复导致的需求下降，但随着6月初线下餐饮客流量已逐步恢复至疫情前同期的八成左右并继续回升，供需关系改善或将使CPI停止回落走势；PPI继续维持低位，为-3.7%，主因是此前低油价导致的PPI相对上游油价的通常1个月滞后，而目前油价已出现修复，外围也有解封复工趋势，PPI后续或将随油价逐步回升。</p><p>更新（7.10）：6月CPI小幅上升，为2.5%，主要受疫情后供给恢复快于需求恢复的供需关系影响；PPI继续维持低位，为-3.0%，但环比终于转正，对应油价修复传导时滞。</p><p><strong>趋势因素</strong>：<br>为对抗疫情，世界各国纷纷开动印钞机。美联储四次财政刺激政策累计2.6万亿美元规模，前4月财政赤字累计1.1万亿美元，而据美国国会办公室推测，2020财年美国财政赤字预计达到3.7万亿美元，赤字率18%，而作为对比，2009年次贷危机时美国财政赤字也仅1.4万亿美元，赤字率9.8%。而在此情况下，美元指数依旧坚挺，今年以来反而升值了3.5%，这是因为世界其它经济体欧元区、日本等也同步推出了刺激计划，比美国放水更多，而如果看黄金，则会发现美元其实是贬值的，表现在今年以来黄金对美元大涨了14%。因此，尽管短期内由于疫情影响需求萎缩，导致资产价格因供需因素短暂下行，但各国释放的流动性必然在未来推高资产价格，贬值涨价是必然趋势。从历史上的几轮世界上的大规模放水来看，涨价趋势将会在接下来的相当一段时间内产生持续影响。</p><h3 id="大类资产"><a href="#大类资产" class="headerlink" title="大类资产"></a>大类资产</h3><p>根据美林时钟，大类资产配置遵循宏观经济的增长和价格数据进行择时。在疫情时代，由于经济活动停滞，导致经济增长下滑和大类资产价格下滑，经济处于衰退期，此时大类资产中债券&gt;现金&gt;股票&gt;大宗；随着各国超出次贷危机规模的大水漫灌，资产价格处于一个长期上涨的一致预期中，如果在全球疫情所致的经济活动停滞尚未大面积恢复前，资产价格已因货币超发而上涨，而经济增长仍处于底部，那么经济处于滞涨期，此时大类资产中现金&gt;大宗商品/债券&gt;股票；而如果疫情得到较快控制，在放水所致的价格上涨前，经济增长先一步得到恢复，那么经济处于复苏期，此时大类资产中股票&gt;债券&gt;现金&gt;大宗；而最后，随着各国疫情逐步得以控制，经济活动大面积恢复，经济增长复苏和涨价同时呈现，经济处于过热期，此时大类资产中大宗商品&gt;股票&gt;现金/债券。</p><h4 id="黄金"><a href="#黄金" class="headerlink" title="黄金"></a>黄金</h4><p>疫情冲击以来，受避险需求增加和各国放水货币贬值预期的影响，黄金配置需求增加，金价震荡向上。长期来看，由于本轮放水规模较大，历史上每次大规模放水均需经过较长时间的消化，在这些时间段里，黄金仍然有其对抗通胀的功能，在各国利率中枢下行逐渐实行负利率的趋势下，对负利率也是一种有效的对抗手段。而就避险而言，随着各国疫情逐步得以控制和正常经济秩序的恢复，黄金的避险功能下降，同时无法分享到经济增长的收益，因此黄金期货受美欧复工等消息影响时有震荡。</p><h4 id="石油"><a href="#石油" class="headerlink" title="石油"></a>石油</h4><p>在疫情影响消费和工业需求双双大幅下降的情况下，油价出现暴跌，从配置角度而言，疫情严重时的经济衰退期大宗商品的收益率也远低于其它资产。但中期来说，油价过调了，国际上低于30美元/桶的油价已经低于了大部分原油的成本线，中东石油的盈亏平衡油价在25-40，美国页岩油的盈亏平衡油价在45-50，长期过低的油价会导致部分油企亏损关停致使供给下降并推动油价向盈亏平衡点上方回归，叠加后疫情时代经济活动逐渐恢复石油需求量回升，和大水漫灌货币贬值推动大宗商品涨价，中长期看石油会有一波修复性反弹。而从大类资产配置角度看，随着世界经济走出衰退期，大宗的配置价值也将随着经济增长和资产价格的恢复而提升。</p><h4 id="美元"><a href="#美元" class="headerlink" title="美元"></a>美元</h4><p>如前所述，美元受美国大幅放水的影响，存在相对于贵金属的贬值，但另一方面，由于世界其它经济体同样在大幅放水，因此美元指数相对坚挺。中长期来说，美元由于其世界货币的地位，随着美国疫情的逐步得到控制和经济活动的逐渐恢复，以及美国财政刺激政策的逐步退出，美元相对黄金的贬值有望逐步减轻。而随着经济的恢复，美元的避险功能消失，也将导致美元因资金流出投资风格转向而不复此前强劲走势。</p><h4 id="货币"><a href="#货币" class="headerlink" title="货币"></a>货币</h4><p>随着利率中枢的下行和流动性的释放，货币市场流动性相当宽松，隔夜资金一度低于1%。近日，资金边际有逐步收紧趋势，上周央行暂停公开市场操作，货币利率小幅上行，隔夜资金成本回到1%上方。中长期来看，两会政府工作报告的财政政策力度位于市场预期的下限，表明尽管宽松政策仍可期，但在报告强调防止资金空转的情况下，要从之前的宽货币传导到实体经济的宽信用，应会伴随着资金利率中枢的小幅上升。</p><h4 id="债券"><a href="#债券" class="headerlink" title="债券"></a>债券</h4><p>世界范围内，债券都是在疫情冲击最严重时期表现最好的资产，一季度从美国到欧元区到我国的债券表现都非常优秀，美国10年期国债利率大幅下行了125bp，相当于上涨了12.5%；10年期中国、英国和德国国债利率分别下行55、46和29bp，相当于上涨了5.5%、4.6%和2.9%。然而第二季度开始债券的表现开始呈现出牛尾的趋势，这主要是由于经济开始走出衰退期，随着经济活动的逐渐恢复，以及最重要的各国的放水和由之而来的涨价预期，债市呈现出明显的牛熊转换的特征。大类配置上，需将债券整体从超配往标配转变的同时，在品种上，就交易盘而言，之前宽货币紧信用下加杠杆配长端利率债（长久期十年国开）的思路，应随着货币利率中枢的上行，逐渐在向未来宽货币宽信用下适当参与高评级信用债（AAA国企债）的方向转变。</p><h4 id="股票"><a href="#股票" class="headerlink" title="股票"></a>股票</h4><p>疫情冲击下海外股票出现暴跌，我国则由于复工较早市场以震荡为主，行业分化严重，传统行业估值极低，TMT医疗等成长股有结构性行情。而在后疫情时代，震荡市+结构性行情的特征预计将延续，但板块分化可能会发生变化。一方面利率中枢上行对债券的影响同样适用于股票的资金面，二方面TMT医疗等领域的估值已经非常高了很难再突破前期高点，中报将近业绩未必经得起考验，因此要继续上行可能有压力，适时可能会有回调。而传统行业随着海外复工以及工业品价格修复以及估值确实太便宜了可能会有一点修复性行情，不会太高，但配合如果有国企中报利润不错，又再分红慷慨一点，可能会有修复。另外因为外围放水太多，贵金属相关的行业公司的股票也能分享到一点收益，可以标配。</p><h3 id="持续跟踪"><a href="#持续跟踪" class="headerlink" title="持续跟踪"></a>持续跟踪</h3><h4 id="6-10更新"><a href="#6-10更新" class="headerlink" title="6.10更新"></a>6.10更新</h4><h4 id="新变化1：国内利率中枢上行"><a href="#新变化1：国内利率中枢上行" class="headerlink" title="新变化1：国内利率中枢上行"></a>新变化1：国内利率中枢上行</h4><p>在经历一季度相当一段时间内隔夜利率低于1的宽货币时代后，在相当短的时间内，利率中枢出现显著上行，隔夜利率在修复1关口后快速进入2时代。这一利率中枢上行主要是受宽信用的政策影响将资金导向实体，避免在金融体系中空转套利所致，因此在中期内利率中枢预计都将稳定在这一区域。<br>受影响最大的是债市，隔夜和七天利率到2以上银行间资金边际趋紧使得之前放杠杆投利率债的思路变得不可行。而随着经济的逐渐修复，经济周期走出底部后利率上行和债市收益率性价比下降是必然，除非外围疫情再出现较大反复或出现其它重大黑天鹅事件，债市的牛市结束从超配变为标配已成必然。</p><h4 id="新变化2：国际风险偏好提升"><a href="#新变化2：国际风险偏好提升" class="headerlink" title="新变化2：国际风险偏好提升"></a>新变化2：国际风险偏好提升</h4><p>表现为避险资产黄金和美元承压，受益于美国非农就业的大幅改善和放开多国禁航，其中前者后被澄清统计口径有误，但美国经济活动逐渐恢复的趋势确已出现，并影响市场整体风格开始出现转变。预计短期内或有反复，但除非二次爆发，否则风险偏好的转向预计也将是近期未来的趋势。</p><h4 id="7-10更新"><a href="#7-10更新" class="headerlink" title="7.10更新"></a>7.10更新</h4><h4 id="新变化1：海外大面积复工与疫情反复交错演绎"><a href="#新变化1：海外大面积复工与疫情反复交错演绎" class="headerlink" title="新变化1：海外大面积复工与疫情反复交错演绎"></a>新变化1：海外大面积复工与疫情反复交错演绎</h4><p>进入本月以来，美国和欧洲大部分之前疫情较为严重的国家均开始进入大面积复工，美非农就业率超预期抬升，国际风险偏好进一步提升，并带动海外股票市场的修复和贵金属美元等避险资产承压。然而，与此同时，伴随着复工进程的是美国疫情感染人数再次抬头，有二次疫情爆发风险，并导致股票市场出现震荡，贵金属重获支撑。预计未来中短期内，海外复工与疫情反复还将继续影响风险资产与避险资产，双双呈现宽幅震荡格局。</p><h4 id="新变化2：国内股票市场放量突破"><a href="#新变化2：国内股票市场放量突破" class="headerlink" title="新变化2：国内股票市场放量突破"></a>新变化2：国内股票市场放量突破</h4><p>今年以来一直未能有效突破的3000点大关，在自上周下半周至本周前半周的多根长阳中被超过1.5万亿巨量有效突破，主要原因在于海外复工带来外需恢复预期和外围市场普涨带动，以及创业板注册制改革对增量资金的需求。本周后三个交易日大盘在3500点前拉锯，两市成交量依然很高，反应对市场观点的分化，一部分由于海外疫情反复和外围股市下挫而呈现较强获利了结意愿，另一部分判断是新一轮牛市起点而积极建仓。预计后市能否进一步突破，主要取决于是否有持续的新增资金入场，以及海外的疫情反复和外需恢复情况。</p>]]></content>
      
      
      <categories>
          
          <category> Eco </category>
          
          <category> Tracking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macroeconomics </tag>
            
            <tag> world observe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏中的延迟反馈与及时反馈对游戏生命周期的影响</title>
      <link href="/2020/05/25/game-review-feedback-in-sims-and-ow/"/>
      <url>/2020/05/25/game-review-feedback-in-sims-and-ow/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
          <category> Review </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
